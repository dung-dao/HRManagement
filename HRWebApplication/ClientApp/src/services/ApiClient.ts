/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ApiClientBase} from './ApiClientBase';

export class EmployeesClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllEmployees(): Promise<EmployeeDTO[]> {
        let url_ = this.baseUrl + "/api/Employees";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllEmployees(_response);
        });
    }

    protected processGetAllEmployees(response: Response): Promise<EmployeeDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeDTO.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createEmployee(body: EmployeeDTO | undefined): Promise<EmployeeDTO> {
        let url_ = this.baseUrl + "/api/Employees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreateEmployee(_response);
        });
    }

    protected processCreateEmployee(response: Response): Promise<EmployeeDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeDTO>(<any>null);
    }

    /**
     * @return Success
     */
    getEmployeeById(id: number): Promise<EmployeeDTO> {
        let url_ = this.baseUrl + "/api/Employees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetEmployeeById(_response);
        });
    }

    protected processGetEmployeeById(response: Response): Promise<EmployeeDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EmployeeDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateEmployeeById(id: number, body: EmployeeDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Employees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdateEmployeeById(_response);
        });
    }

    protected processUpdateEmployeeById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    deleteEmployeeById(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Employees/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDeleteEmployeeById(_response);
        });
    }

    protected processDeleteEmployeeById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getPositionsByEmployeeId(id: number): Promise<PositionDTO[]> {
        let url_ = this.baseUrl + "/api/Employees/{id}/positions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetPositionsByEmployeeId(_response);
        });
    }

    protected processGetPositionsByEmployeeId(response: Response): Promise<PositionDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PositionDTO.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PositionDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    positions(id: number, body: PositionDTO | undefined): Promise<PositionDTO> {
        let url_ = this.baseUrl + "/api/Employees/{id}/positions";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processPositions(_response);
        });
    }

    protected processPositions(response: Response): Promise<PositionDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PositionDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PositionDTO>(<any>null);
    }

    /**
     * @return Success
     */
    positions2(id: number, positionId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Employees/{id}/positions/{positionId}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (positionId === undefined || positionId === null)
            throw new Error("The parameter 'positionId' must be defined.");
        url_ = url_.replace("{positionId}", encodeURIComponent("" + positionId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processPositions2(_response);
        });
    }

    protected processPositions2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OidcConfigurationClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    _configuration(clientId: string | null): Promise<void> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.process_configuration(_response);
        });
    }

    protected process_configuration(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OrganizationUnitsClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    organizationUnits_GetAll(): Promise<OrganizationUnitDTO[]> {
        let url_ = this.baseUrl + "/api/OrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_GetAll(_response);
        });
    }

    protected processOrganizationUnits_GetAll(response: Response): Promise<OrganizationUnitDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OrganizationUnitDTO.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationUnitDTO[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    organizationUnits_CreateRootUnit(body: OrganizationUnitDTO | undefined): Promise<OrganizationUnitDTO> {
        let url_ = this.baseUrl + "/api/OrganizationUnits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_CreateRootUnit(_response);
        });
    }

    protected processOrganizationUnits_CreateRootUnit(response: Response): Promise<OrganizationUnitDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationUnitDTO>(<any>null);
    }

    /**
     * @return Success
     */
    organizationUnits_GetById(id: number): Promise<OrganizationUnitDTO> {
        let url_ = this.baseUrl + "/api/OrganizationUnits/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_GetById(_response);
        });
    }

    protected processOrganizationUnits_GetById(response: Response): Promise<OrganizationUnitDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationUnitDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    organizationUnits_Update(id: number, body: OrganizationUnitDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/OrganizationUnits/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_Update(_response);
        });
    }

    protected processOrganizationUnits_Update(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    organizationUnits_Delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/OrganizationUnits/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_Delete(_response);
        });
    }

    protected processOrganizationUnits_Delete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    organizationUnits_CreateUnit(id: number, body: OrganizationUnitDTO | undefined): Promise<OrganizationUnitDTO> {
        let url_ = this.baseUrl + "/api/OrganizationUnits/{id}/children";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_CreateUnit(_response);
        });
    }

    protected processOrganizationUnits_CreateUnit(response: Response): Promise<OrganizationUnitDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationUnitDTO>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    organizationUnits_ChangeParent(id: number, body: OrganizationUnitDTO | undefined): Promise<OrganizationUnitDTO> {
        let url_ = this.baseUrl + "/api/OrganizationUnits/{id}/parent";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processOrganizationUnits_ChangeParent(_response);
        });
    }

    protected processOrganizationUnits_ChangeParent(response: Response): Promise<OrganizationUnitDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrganizationUnitDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OrganizationUnitDTO>(<any>null);
    }
}

export class EmployeeDTO implements IEmployeeDTO {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    personalEmail?: string | undefined;
    workEmail?: string | undefined;
    phone?: string | undefined;
    dateOfBirth?: Date;
    sex?: string | undefined;
    address?: string | undefined;
    currentAddress?: string | undefined;
    nationalId?: string | undefined;

    constructor(data?: IEmployeeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.personalEmail = _data["personalEmail"];
            this.workEmail = _data["workEmail"];
            this.phone = _data["phone"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.sex = _data["sex"];
            this.address = _data["address"];
            this.currentAddress = _data["currentAddress"];
            this.nationalId = _data["nationalId"];
        }
    }

    static fromJS(data: any): EmployeeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["personalEmail"] = this.personalEmail;
        data["workEmail"] = this.workEmail;
        data["phone"] = this.phone;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["sex"] = this.sex;
        data["address"] = this.address;
        data["currentAddress"] = this.currentAddress;
        data["nationalId"] = this.nationalId;
        return data; 
    }
}

export interface IEmployeeDTO {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    personalEmail?: string | undefined;
    workEmail?: string | undefined;
    phone?: string | undefined;
    dateOfBirth?: Date;
    sex?: string | undefined;
    address?: string | undefined;
    currentAddress?: string | undefined;
    nationalId?: string | undefined;
}

export class JobTitle implements IJobTitle {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IJobTitle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): JobTitle {
        data = typeof data === 'object' ? data : {};
        let result = new JobTitle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

export interface IJobTitle {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class EmploymentStatus implements IEmploymentStatus {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IEmploymentStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): EmploymentStatus {
        data = typeof data === 'object' ? data : {};
        let result = new EmploymentStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

export interface IEmploymentStatus {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class JobCategory implements IJobCategory {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IJobCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): JobCategory {
        data = typeof data === 'object' ? data : {};
        let result = new JobCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data; 
    }
}

export interface IJobCategory {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
}

export class Position implements IPosition {
    id?: number;
    startDate?: Date;
    endDate?: Date | undefined;
    salery?: number;
    employee?: Employee;
    jobTitle?: JobTitle;
    employmentStatus?: EmploymentStatus;
    jobCategory?: JobCategory;
    unit?: OrganizationUnit;

    constructor(data?: IPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.salery = _data["salery"];
            this.employee = _data["employee"] ? Employee.fromJS(_data["employee"]) : <any>undefined;
            this.jobTitle = _data["jobTitle"] ? JobTitle.fromJS(_data["jobTitle"]) : <any>undefined;
            this.employmentStatus = _data["employmentStatus"] ? EmploymentStatus.fromJS(_data["employmentStatus"]) : <any>undefined;
            this.jobCategory = _data["jobCategory"] ? JobCategory.fromJS(_data["jobCategory"]) : <any>undefined;
            this.unit = _data["unit"] ? OrganizationUnit.fromJS(_data["unit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Position {
        data = typeof data === 'object' ? data : {};
        let result = new Position();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["salery"] = this.salery;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["jobTitle"] = this.jobTitle ? this.jobTitle.toJSON() : <any>undefined;
        data["employmentStatus"] = this.employmentStatus ? this.employmentStatus.toJSON() : <any>undefined;
        data["jobCategory"] = this.jobCategory ? this.jobCategory.toJSON() : <any>undefined;
        data["unit"] = this.unit ? this.unit.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPosition {
    id?: number;
    startDate?: Date;
    endDate?: Date | undefined;
    salery?: number;
    employee?: Employee;
    jobTitle?: JobTitle;
    employmentStatus?: EmploymentStatus;
    jobCategory?: JobCategory;
    unit?: OrganizationUnit;
}

export class Employee implements IEmployee {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    personalEmail?: string | undefined;
    workEmail?: string | undefined;
    phone?: string | undefined;
    dateOfBirth?: Date;
    sex?: string | undefined;
    address?: string | undefined;
    currentAddress?: string | undefined;
    nationalId?: string | undefined;
    positions?: Position[] | undefined;

    constructor(data?: IEmployee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.personalEmail = _data["personalEmail"];
            this.workEmail = _data["workEmail"];
            this.phone = _data["phone"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.sex = _data["sex"];
            this.address = _data["address"];
            this.currentAddress = _data["currentAddress"];
            this.nationalId = _data["nationalId"];
            if (Array.isArray(_data["positions"])) {
                this.positions = [] as any;
                for (let item of _data["positions"])
                    this.positions!.push(Position.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Employee {
        data = typeof data === 'object' ? data : {};
        let result = new Employee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["personalEmail"] = this.personalEmail;
        data["workEmail"] = this.workEmail;
        data["phone"] = this.phone;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["sex"] = this.sex;
        data["address"] = this.address;
        data["currentAddress"] = this.currentAddress;
        data["nationalId"] = this.nationalId;
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEmployee {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    personalEmail?: string | undefined;
    workEmail?: string | undefined;
    phone?: string | undefined;
    dateOfBirth?: Date;
    sex?: string | undefined;
    address?: string | undefined;
    currentAddress?: string | undefined;
    nationalId?: string | undefined;
    positions?: Position[] | undefined;
}

export class OrganizationUnit implements IOrganizationUnit {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    parentId?: number | undefined;
    parent?: OrganizationUnit;
    children?: OrganizationUnit[] | undefined;
    employees?: Employee[] | undefined;

    constructor(data?: IOrganizationUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.parentId = _data["parentId"];
            this.parent = _data["parent"] ? OrganizationUnit.fromJS(_data["parent"]) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(OrganizationUnit.fromJS(item));
            }
            if (Array.isArray(_data["employees"])) {
                this.employees = [] as any;
                for (let item of _data["employees"])
                    this.employees!.push(Employee.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OrganizationUnit {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (Array.isArray(this.employees)) {
            data["employees"] = [];
            for (let item of this.employees)
                data["employees"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOrganizationUnit {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    parentId?: number | undefined;
    parent?: OrganizationUnit;
    children?: OrganizationUnit[] | undefined;
    employees?: Employee[] | undefined;
}

export class PositionDTO implements IPositionDTO {
    startDate?: Date;
    endDate?: Date;
    salery?: number;
    jobTitle?: JobTitle;
    employmentStatus?: EmploymentStatus;
    jobCategory?: JobCategory;
    unit?: OrganizationUnit;

    constructor(data?: IPositionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.salery = _data["salery"];
            this.jobTitle = _data["jobTitle"] ? JobTitle.fromJS(_data["jobTitle"]) : <any>undefined;
            this.employmentStatus = _data["employmentStatus"] ? EmploymentStatus.fromJS(_data["employmentStatus"]) : <any>undefined;
            this.jobCategory = _data["jobCategory"] ? JobCategory.fromJS(_data["jobCategory"]) : <any>undefined;
            this.unit = _data["unit"] ? OrganizationUnit.fromJS(_data["unit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PositionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PositionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["salery"] = this.salery;
        data["jobTitle"] = this.jobTitle ? this.jobTitle.toJSON() : <any>undefined;
        data["employmentStatus"] = this.employmentStatus ? this.employmentStatus.toJSON() : <any>undefined;
        data["jobCategory"] = this.jobCategory ? this.jobCategory.toJSON() : <any>undefined;
        data["unit"] = this.unit ? this.unit.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IPositionDTO {
    startDate?: Date;
    endDate?: Date;
    salery?: number;
    jobTitle?: JobTitle;
    employmentStatus?: EmploymentStatus;
    jobCategory?: JobCategory;
    unit?: OrganizationUnit;
}

export class OrganizationUnitDTO implements IOrganizationUnitDTO {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    employeeNo?: number;
    parentId?: number | undefined;

    constructor(data?: IOrganizationUnitDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.employeeNo = _data["employeeNo"];
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): OrganizationUnitDTO {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["employeeNo"] = this.employeeNo;
        data["parentId"] = this.parentId;
        return data; 
    }
}

export interface IOrganizationUnitDTO {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    employeeNo?: number;
    parentId?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}